name: Build

on:
  push:
    paths:
      .github/workflows/build.yml
  schedule:
    - cron: '0 8 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: alpine

    steps:
      - name: Install dependencies
        run: |
          apk add --update alpine-sdk linux-headers git zlib-dev libressl-dev gperf cmake ninja
          git config --global --add safe.directory /__w/tgbotserver-build/tgbotserver-build
      - uses: actions/checkout@v4
        with:
          repository: tdlib/telegram-bot-api
          submodules: recursive
      - name: Generate git hash
        run: echo "UPSTREAM_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Build
        env:
          CMAKE_GENERATOR: Ninja
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install
      - name: Package
        run: |
          wget https://github.com/codehz/EasyPak/releases/download/v0.5.0/ezbin
          chmod +x ezbin
          mkdir lib
          ldd bin/telegram-bot-api | tail -n +2 | awk '{ print $3 }' | while read line; do cp $line lib; done
          ./ezbin api-server <(
          cat <<EOF
          mktmpfs /tmp
          mktmpfs /tmp/tmp
          mkdir /tmp/root
          bind .:/tmp/root
          env HOME=/root
          chroot /tmp
          chdir /bin
          @bin
          chdir /lib
          @lib
          chdir /root
          exec-passthru /bin/telegram-bot-api
          EOF
          )
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            bin
            lib
      - name: Upload release
        uses: dothq/tag-and-release-and-upload@v1.2.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          version: "upstream-${{ env.UPSTREAM_HASH }}"
          overwrite: true
          assets: '["api-server"]'
